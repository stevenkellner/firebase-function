import { Sha512CustomEncoding } from '../../src';
import { expect } from '../testUtils';

describe('Sha512CustomEncoding', () => {

    it('empty alphabet', () => {
        const hasher = new Sha512CustomEncoding('');
        expect(hasher.hash('')).to.be.equal('');
        expect(hasher.hash('ksadhlömasc298089qwer')).to.be.equal('');
        expect(hasher.hash('', 'Acgva')).to.be.equal('');
        expect(hasher.hash('ksadhlömasc298089qwer', 'Acgva')).to.be.equal('');
    });

    it('binary alphabet', () => {
        const hasher = new Sha512CustomEncoding('01');
        expect(hasher.hash('')).to.be.equal
        expect(hasher.hash('ksadhlömasc298089qwer')).to.be.equal
        expect(hasher.hash('', 'Acgva')).to.be.equal
        expect(hasher.hash('ksadhlömasc298089qwer', 'Acgva')).to.be.equal
    });

    it('custom alphabet', () => {
        const hasher = new Sha512CustomEncoding('ABCDEFGH');
        expect(hasher.hash('')).to.be.equal('DBHEAHGAEGFDHFGHGHAFHDHAFCEBCAFADCGDDDAAAAHGFECADEEABCAFFCHAFDFGCADHFBCEEEBGEGGGDFBGDEEDHCAGECDGBDFEBDHBCGAHHHABEDAGEFADFHGHDACHFEDFGCDAGHFCBGEAFHCEADCCEHABEEHFDHBBBHFFAHG');
        expect(hasher.hash('ksadhlömasc298089qwer')).to.be.equal('AAEBHDDBFFGCAADHBDDDDABBGFFEDBCADFGBGEBGFDEEADFCEDHCHFGECDADGDCEEABAGEDEGGGEEFAAHDGFCHDCEGBHECHFDDHDGCCGGCCBAAEFFFGEEAEAHHBAECCCDHGEAAADDBCFFABCBCHFCCDECAGFGGHDBBBHECCFDBH');
        expect(hasher.hash('', 'Acgva')).to.be.equal('CEFGBGGHGEDDHDECDHFEGBBBEFGBFBFDEEEECGFCGCECCHGEDHGEECAAHABDAADBDGHFHAGDCCDEDDEEGBHDBCEDEFAECHAEFEAHDBEBABBABEBAEBAGBHCBGCCBCFDEBDHHBBCHEDHBCEBFCFEDBFGAFBFAEEDEHHHEHDAFDGB');
        expect(hasher.hash('ksadhlömasc298089qwer', 'Acgva')).to.be.equal('DADFDFCHDCCHDEDEDGFDHBFDAGFGHEDEEAFFCEHGBGGABHCCBCACHACHFFDFGBCDAHEHEEBFGHHFGEEAECBFGFCDEEABGHCCDBDBHGGDADAABAABFCGHDHFEEEAEHCCBEHDAGGAGGDAADHFFEDCDDCFADFDEECEBBDFCHCGDFAG');
    });
});
